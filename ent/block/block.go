// Code generated by ent, DO NOT EDIT.

package block

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the block type in the database.
	Label = "block"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreationDate holds the string denoting the creationdate field in the database.
	FieldCreationDate = "creation_date"
	// FieldFinishDate holds the string denoting the finishdate field in the database.
	FieldFinishDate = "finish_date"
	// FieldTargetMinutes holds the string denoting the targetminutes field in the database.
	FieldTargetMinutes = "target_minutes"
	// FieldDistractionMinutes holds the string denoting the distractionminutes field in the database.
	FieldDistractionMinutes = "distraction_minutes"
	// FieldTag holds the string denoting the tag field in the database.
	FieldTag = "tag"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the block in the database.
	Table = "blocks"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "blocks"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_blocks"
)

// Columns holds all SQL columns for block fields.
var Columns = []string{
	FieldID,
	FieldCreationDate,
	FieldFinishDate,
	FieldTargetMinutes,
	FieldDistractionMinutes,
	FieldTag,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "blocks"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_blocks",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreationDate holds the default value on creation for the "creationDate" field.
	DefaultCreationDate func() time.Time
	// DefaultTargetMinutes holds the default value on creation for the "targetMinutes" field.
	DefaultTargetMinutes int
	// DefaultDistractionMinutes holds the default value on creation for the "distractionMinutes" field.
	DefaultDistractionMinutes int
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Block queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreationDate orders the results by the creationDate field.
func ByCreationDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreationDate, opts...).ToFunc()
}

// ByFinishDate orders the results by the finishDate field.
func ByFinishDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinishDate, opts...).ToFunc()
}

// ByTargetMinutes orders the results by the targetMinutes field.
func ByTargetMinutes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetMinutes, opts...).ToFunc()
}

// ByDistractionMinutes orders the results by the distractionMinutes field.
func ByDistractionMinutes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDistractionMinutes, opts...).ToFunc()
}

// ByTag orders the results by the tag field.
func ByTag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTag, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
