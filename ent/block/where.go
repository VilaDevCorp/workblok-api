// Code generated by ent, DO NOT EDIT.

package block

import (
	"time"
	"workblok/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldID, id))
}

// CreationDate applies equality check predicate on the "creationDate" field. It's identical to CreationDateEQ.
func CreationDate(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldCreationDate, v))
}

// FinishDate applies equality check predicate on the "finishDate" field. It's identical to FinishDateEQ.
func FinishDate(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldFinishDate, v))
}

// TargetMinutes applies equality check predicate on the "targetMinutes" field. It's identical to TargetMinutesEQ.
func TargetMinutes(v int) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldTargetMinutes, v))
}

// DistractionMinutes applies equality check predicate on the "distractionMinutes" field. It's identical to DistractionMinutesEQ.
func DistractionMinutes(v int) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldDistractionMinutes, v))
}

// CreationDateEQ applies the EQ predicate on the "creationDate" field.
func CreationDateEQ(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldCreationDate, v))
}

// CreationDateNEQ applies the NEQ predicate on the "creationDate" field.
func CreationDateNEQ(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldCreationDate, v))
}

// CreationDateIn applies the In predicate on the "creationDate" field.
func CreationDateIn(vs ...time.Time) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldCreationDate, vs...))
}

// CreationDateNotIn applies the NotIn predicate on the "creationDate" field.
func CreationDateNotIn(vs ...time.Time) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldCreationDate, vs...))
}

// CreationDateGT applies the GT predicate on the "creationDate" field.
func CreationDateGT(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldCreationDate, v))
}

// CreationDateGTE applies the GTE predicate on the "creationDate" field.
func CreationDateGTE(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldCreationDate, v))
}

// CreationDateLT applies the LT predicate on the "creationDate" field.
func CreationDateLT(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldCreationDate, v))
}

// CreationDateLTE applies the LTE predicate on the "creationDate" field.
func CreationDateLTE(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldCreationDate, v))
}

// FinishDateEQ applies the EQ predicate on the "finishDate" field.
func FinishDateEQ(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldFinishDate, v))
}

// FinishDateNEQ applies the NEQ predicate on the "finishDate" field.
func FinishDateNEQ(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldFinishDate, v))
}

// FinishDateIn applies the In predicate on the "finishDate" field.
func FinishDateIn(vs ...time.Time) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldFinishDate, vs...))
}

// FinishDateNotIn applies the NotIn predicate on the "finishDate" field.
func FinishDateNotIn(vs ...time.Time) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldFinishDate, vs...))
}

// FinishDateGT applies the GT predicate on the "finishDate" field.
func FinishDateGT(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldFinishDate, v))
}

// FinishDateGTE applies the GTE predicate on the "finishDate" field.
func FinishDateGTE(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldFinishDate, v))
}

// FinishDateLT applies the LT predicate on the "finishDate" field.
func FinishDateLT(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldFinishDate, v))
}

// FinishDateLTE applies the LTE predicate on the "finishDate" field.
func FinishDateLTE(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldFinishDate, v))
}

// FinishDateIsNil applies the IsNil predicate on the "finishDate" field.
func FinishDateIsNil() predicate.Block {
	return predicate.Block(sql.FieldIsNull(FieldFinishDate))
}

// FinishDateNotNil applies the NotNil predicate on the "finishDate" field.
func FinishDateNotNil() predicate.Block {
	return predicate.Block(sql.FieldNotNull(FieldFinishDate))
}

// TargetMinutesEQ applies the EQ predicate on the "targetMinutes" field.
func TargetMinutesEQ(v int) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldTargetMinutes, v))
}

// TargetMinutesNEQ applies the NEQ predicate on the "targetMinutes" field.
func TargetMinutesNEQ(v int) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldTargetMinutes, v))
}

// TargetMinutesIn applies the In predicate on the "targetMinutes" field.
func TargetMinutesIn(vs ...int) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldTargetMinutes, vs...))
}

// TargetMinutesNotIn applies the NotIn predicate on the "targetMinutes" field.
func TargetMinutesNotIn(vs ...int) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldTargetMinutes, vs...))
}

// TargetMinutesGT applies the GT predicate on the "targetMinutes" field.
func TargetMinutesGT(v int) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldTargetMinutes, v))
}

// TargetMinutesGTE applies the GTE predicate on the "targetMinutes" field.
func TargetMinutesGTE(v int) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldTargetMinutes, v))
}

// TargetMinutesLT applies the LT predicate on the "targetMinutes" field.
func TargetMinutesLT(v int) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldTargetMinutes, v))
}

// TargetMinutesLTE applies the LTE predicate on the "targetMinutes" field.
func TargetMinutesLTE(v int) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldTargetMinutes, v))
}

// DistractionMinutesEQ applies the EQ predicate on the "distractionMinutes" field.
func DistractionMinutesEQ(v int) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldDistractionMinutes, v))
}

// DistractionMinutesNEQ applies the NEQ predicate on the "distractionMinutes" field.
func DistractionMinutesNEQ(v int) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldDistractionMinutes, v))
}

// DistractionMinutesIn applies the In predicate on the "distractionMinutes" field.
func DistractionMinutesIn(vs ...int) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldDistractionMinutes, vs...))
}

// DistractionMinutesNotIn applies the NotIn predicate on the "distractionMinutes" field.
func DistractionMinutesNotIn(vs ...int) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldDistractionMinutes, vs...))
}

// DistractionMinutesGT applies the GT predicate on the "distractionMinutes" field.
func DistractionMinutesGT(v int) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldDistractionMinutes, v))
}

// DistractionMinutesGTE applies the GTE predicate on the "distractionMinutes" field.
func DistractionMinutesGTE(v int) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldDistractionMinutes, v))
}

// DistractionMinutesLT applies the LT predicate on the "distractionMinutes" field.
func DistractionMinutesLT(v int) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldDistractionMinutes, v))
}

// DistractionMinutesLTE applies the LTE predicate on the "distractionMinutes" field.
func DistractionMinutesLTE(v int) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldDistractionMinutes, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Block {
	return predicate.Block(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Block {
	return predicate.Block(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Block) predicate.Block {
	return predicate.Block(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Block) predicate.Block {
	return predicate.Block(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Block) predicate.Block {
	return predicate.Block(func(s *sql.Selector) {
		p(s.Not())
	})
}
