// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreationDate holds the string denoting the creationdate field in the database.
	FieldCreationDate = "creation_date"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldEmailValid holds the string denoting the emailvalid field in the database.
	FieldEmailValid = "email_valid"
	// FieldConfig holds the string denoting the config field in the database.
	FieldConfig = "config"
	// FieldTutorialCompleted holds the string denoting the tutorialcompleted field in the database.
	FieldTutorialCompleted = "tutorial_completed"
	// EdgeBlocks holds the string denoting the blocks edge name in mutations.
	EdgeBlocks = "blocks"
	// EdgeCodes holds the string denoting the codes edge name in mutations.
	EdgeCodes = "codes"
	// Table holds the table name of the user in the database.
	Table = "users"
	// BlocksTable is the table that holds the blocks relation/edge.
	BlocksTable = "blocks"
	// BlocksInverseTable is the table name for the Block entity.
	// It exists in this package in order to avoid circular dependency with the "block" package.
	BlocksInverseTable = "blocks"
	// BlocksColumn is the table column denoting the blocks relation/edge.
	BlocksColumn = "user_blocks"
	// CodesTable is the table that holds the codes relation/edge.
	CodesTable = "verification_codes"
	// CodesInverseTable is the table name for the VerificationCode entity.
	// It exists in this package in order to avoid circular dependency with the "verificationcode" package.
	CodesInverseTable = "verification_codes"
	// CodesColumn is the table column denoting the codes relation/edge.
	CodesColumn = "user_codes"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreationDate,
	FieldUsername,
	FieldEmail,
	FieldPassword,
	FieldEmailValid,
	FieldConfig,
	FieldTutorialCompleted,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreationDate holds the default value on creation for the "creationDate" field.
	DefaultCreationDate func() time.Time
	// UsernameValidator is a validator for the "Username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// EmailValidator is a validator for the "Email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// PasswordValidator is a validator for the "Password" field. It is called by the builders before save.
	PasswordValidator func(string) error
	// DefaultEmailValid holds the default value on creation for the "EmailValid" field.
	DefaultEmailValid bool
	// DefaultTutorialCompleted holds the default value on creation for the "TutorialCompleted" field.
	DefaultTutorialCompleted bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreationDate orders the results by the creationDate field.
func ByCreationDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreationDate, opts...).ToFunc()
}

// ByUsername orders the results by the Username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByEmail orders the results by the Email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPassword orders the results by the Password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByEmailValid orders the results by the EmailValid field.
func ByEmailValid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailValid, opts...).ToFunc()
}

// ByTutorialCompleted orders the results by the TutorialCompleted field.
func ByTutorialCompleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTutorialCompleted, opts...).ToFunc()
}

// ByBlocksCount orders the results by blocks count.
func ByBlocksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBlocksStep(), opts...)
	}
}

// ByBlocks orders the results by blocks terms.
func ByBlocks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlocksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCodesCount orders the results by codes count.
func ByCodesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCodesStep(), opts...)
	}
}

// ByCodes orders the results by codes terms.
func ByCodes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCodesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newBlocksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlocksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BlocksTable, BlocksColumn),
	)
}
func newCodesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CodesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CodesTable, CodesColumn),
	)
}
