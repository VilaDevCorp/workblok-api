// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"
	"workblok/ent/block"
	"workblok/ent/predicate"
	"workblok/ent/user"
	"workblok/ent/verificationcode"
	"workblok/schema"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBlock            = "Block"
	TypeUser             = "User"
	TypeVerificationCode = "VerificationCode"
)

// BlockMutation represents an operation that mutates the Block nodes in the graph.
type BlockMutation struct {
	config
	op                    Op
	typ                   string
	id                    *uuid.UUID
	creationDate          *time.Time
	finishDate            *time.Time
	targetMinutes         *int
	addtargetMinutes      *int
	distractionMinutes    *int
	adddistractionMinutes *int
	tag                   *string
	clearedFields         map[string]struct{}
	user                  *uuid.UUID
	cleareduser           bool
	done                  bool
	oldValue              func(context.Context) (*Block, error)
	predicates            []predicate.Block
}

var _ ent.Mutation = (*BlockMutation)(nil)

// blockOption allows management of the mutation configuration using functional options.
type blockOption func(*BlockMutation)

// newBlockMutation creates new mutation for the Block entity.
func newBlockMutation(c config, op Op, opts ...blockOption) *BlockMutation {
	m := &BlockMutation{
		config:        c,
		op:            op,
		typ:           TypeBlock,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBlockID sets the ID field of the mutation.
func withBlockID(id uuid.UUID) blockOption {
	return func(m *BlockMutation) {
		var (
			err   error
			once  sync.Once
			value *Block
		)
		m.oldValue = func(ctx context.Context) (*Block, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Block.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBlock sets the old Block of the mutation.
func withBlock(node *Block) blockOption {
	return func(m *BlockMutation) {
		m.oldValue = func(context.Context) (*Block, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BlockMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BlockMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Block entities.
func (m *BlockMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BlockMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BlockMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Block.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreationDate sets the "creationDate" field.
func (m *BlockMutation) SetCreationDate(t time.Time) {
	m.creationDate = &t
}

// CreationDate returns the value of the "creationDate" field in the mutation.
func (m *BlockMutation) CreationDate() (r time.Time, exists bool) {
	v := m.creationDate
	if v == nil {
		return
	}
	return *v, true
}

// OldCreationDate returns the old "creationDate" field's value of the Block entity.
// If the Block object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlockMutation) OldCreationDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreationDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreationDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreationDate: %w", err)
	}
	return oldValue.CreationDate, nil
}

// ResetCreationDate resets all changes to the "creationDate" field.
func (m *BlockMutation) ResetCreationDate() {
	m.creationDate = nil
}

// SetFinishDate sets the "finishDate" field.
func (m *BlockMutation) SetFinishDate(t time.Time) {
	m.finishDate = &t
}

// FinishDate returns the value of the "finishDate" field in the mutation.
func (m *BlockMutation) FinishDate() (r time.Time, exists bool) {
	v := m.finishDate
	if v == nil {
		return
	}
	return *v, true
}

// OldFinishDate returns the old "finishDate" field's value of the Block entity.
// If the Block object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlockMutation) OldFinishDate(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFinishDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFinishDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFinishDate: %w", err)
	}
	return oldValue.FinishDate, nil
}

// ClearFinishDate clears the value of the "finishDate" field.
func (m *BlockMutation) ClearFinishDate() {
	m.finishDate = nil
	m.clearedFields[block.FieldFinishDate] = struct{}{}
}

// FinishDateCleared returns if the "finishDate" field was cleared in this mutation.
func (m *BlockMutation) FinishDateCleared() bool {
	_, ok := m.clearedFields[block.FieldFinishDate]
	return ok
}

// ResetFinishDate resets all changes to the "finishDate" field.
func (m *BlockMutation) ResetFinishDate() {
	m.finishDate = nil
	delete(m.clearedFields, block.FieldFinishDate)
}

// SetTargetMinutes sets the "targetMinutes" field.
func (m *BlockMutation) SetTargetMinutes(i int) {
	m.targetMinutes = &i
	m.addtargetMinutes = nil
}

// TargetMinutes returns the value of the "targetMinutes" field in the mutation.
func (m *BlockMutation) TargetMinutes() (r int, exists bool) {
	v := m.targetMinutes
	if v == nil {
		return
	}
	return *v, true
}

// OldTargetMinutes returns the old "targetMinutes" field's value of the Block entity.
// If the Block object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlockMutation) OldTargetMinutes(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTargetMinutes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTargetMinutes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTargetMinutes: %w", err)
	}
	return oldValue.TargetMinutes, nil
}

// AddTargetMinutes adds i to the "targetMinutes" field.
func (m *BlockMutation) AddTargetMinutes(i int) {
	if m.addtargetMinutes != nil {
		*m.addtargetMinutes += i
	} else {
		m.addtargetMinutes = &i
	}
}

// AddedTargetMinutes returns the value that was added to the "targetMinutes" field in this mutation.
func (m *BlockMutation) AddedTargetMinutes() (r int, exists bool) {
	v := m.addtargetMinutes
	if v == nil {
		return
	}
	return *v, true
}

// ResetTargetMinutes resets all changes to the "targetMinutes" field.
func (m *BlockMutation) ResetTargetMinutes() {
	m.targetMinutes = nil
	m.addtargetMinutes = nil
}

// SetDistractionMinutes sets the "distractionMinutes" field.
func (m *BlockMutation) SetDistractionMinutes(i int) {
	m.distractionMinutes = &i
	m.adddistractionMinutes = nil
}

// DistractionMinutes returns the value of the "distractionMinutes" field in the mutation.
func (m *BlockMutation) DistractionMinutes() (r int, exists bool) {
	v := m.distractionMinutes
	if v == nil {
		return
	}
	return *v, true
}

// OldDistractionMinutes returns the old "distractionMinutes" field's value of the Block entity.
// If the Block object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlockMutation) OldDistractionMinutes(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDistractionMinutes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDistractionMinutes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDistractionMinutes: %w", err)
	}
	return oldValue.DistractionMinutes, nil
}

// AddDistractionMinutes adds i to the "distractionMinutes" field.
func (m *BlockMutation) AddDistractionMinutes(i int) {
	if m.adddistractionMinutes != nil {
		*m.adddistractionMinutes += i
	} else {
		m.adddistractionMinutes = &i
	}
}

// AddedDistractionMinutes returns the value that was added to the "distractionMinutes" field in this mutation.
func (m *BlockMutation) AddedDistractionMinutes() (r int, exists bool) {
	v := m.adddistractionMinutes
	if v == nil {
		return
	}
	return *v, true
}

// ResetDistractionMinutes resets all changes to the "distractionMinutes" field.
func (m *BlockMutation) ResetDistractionMinutes() {
	m.distractionMinutes = nil
	m.adddistractionMinutes = nil
}

// SetTag sets the "tag" field.
func (m *BlockMutation) SetTag(s string) {
	m.tag = &s
}

// Tag returns the value of the "tag" field in the mutation.
func (m *BlockMutation) Tag() (r string, exists bool) {
	v := m.tag
	if v == nil {
		return
	}
	return *v, true
}

// OldTag returns the old "tag" field's value of the Block entity.
// If the Block object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlockMutation) OldTag(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTag is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTag requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTag: %w", err)
	}
	return oldValue.Tag, nil
}

// ResetTag resets all changes to the "tag" field.
func (m *BlockMutation) ResetTag() {
	m.tag = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *BlockMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *BlockMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *BlockMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *BlockMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *BlockMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *BlockMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the BlockMutation builder.
func (m *BlockMutation) Where(ps ...predicate.Block) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BlockMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BlockMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Block, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BlockMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BlockMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Block).
func (m *BlockMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BlockMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.creationDate != nil {
		fields = append(fields, block.FieldCreationDate)
	}
	if m.finishDate != nil {
		fields = append(fields, block.FieldFinishDate)
	}
	if m.targetMinutes != nil {
		fields = append(fields, block.FieldTargetMinutes)
	}
	if m.distractionMinutes != nil {
		fields = append(fields, block.FieldDistractionMinutes)
	}
	if m.tag != nil {
		fields = append(fields, block.FieldTag)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BlockMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case block.FieldCreationDate:
		return m.CreationDate()
	case block.FieldFinishDate:
		return m.FinishDate()
	case block.FieldTargetMinutes:
		return m.TargetMinutes()
	case block.FieldDistractionMinutes:
		return m.DistractionMinutes()
	case block.FieldTag:
		return m.Tag()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BlockMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case block.FieldCreationDate:
		return m.OldCreationDate(ctx)
	case block.FieldFinishDate:
		return m.OldFinishDate(ctx)
	case block.FieldTargetMinutes:
		return m.OldTargetMinutes(ctx)
	case block.FieldDistractionMinutes:
		return m.OldDistractionMinutes(ctx)
	case block.FieldTag:
		return m.OldTag(ctx)
	}
	return nil, fmt.Errorf("unknown Block field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BlockMutation) SetField(name string, value ent.Value) error {
	switch name {
	case block.FieldCreationDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreationDate(v)
		return nil
	case block.FieldFinishDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFinishDate(v)
		return nil
	case block.FieldTargetMinutes:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTargetMinutes(v)
		return nil
	case block.FieldDistractionMinutes:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDistractionMinutes(v)
		return nil
	case block.FieldTag:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTag(v)
		return nil
	}
	return fmt.Errorf("unknown Block field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BlockMutation) AddedFields() []string {
	var fields []string
	if m.addtargetMinutes != nil {
		fields = append(fields, block.FieldTargetMinutes)
	}
	if m.adddistractionMinutes != nil {
		fields = append(fields, block.FieldDistractionMinutes)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BlockMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case block.FieldTargetMinutes:
		return m.AddedTargetMinutes()
	case block.FieldDistractionMinutes:
		return m.AddedDistractionMinutes()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BlockMutation) AddField(name string, value ent.Value) error {
	switch name {
	case block.FieldTargetMinutes:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTargetMinutes(v)
		return nil
	case block.FieldDistractionMinutes:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDistractionMinutes(v)
		return nil
	}
	return fmt.Errorf("unknown Block numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BlockMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(block.FieldFinishDate) {
		fields = append(fields, block.FieldFinishDate)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BlockMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BlockMutation) ClearField(name string) error {
	switch name {
	case block.FieldFinishDate:
		m.ClearFinishDate()
		return nil
	}
	return fmt.Errorf("unknown Block nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BlockMutation) ResetField(name string) error {
	switch name {
	case block.FieldCreationDate:
		m.ResetCreationDate()
		return nil
	case block.FieldFinishDate:
		m.ResetFinishDate()
		return nil
	case block.FieldTargetMinutes:
		m.ResetTargetMinutes()
		return nil
	case block.FieldDistractionMinutes:
		m.ResetDistractionMinutes()
		return nil
	case block.FieldTag:
		m.ResetTag()
		return nil
	}
	return fmt.Errorf("unknown Block field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BlockMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, block.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BlockMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case block.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BlockMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BlockMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BlockMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, block.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BlockMutation) EdgeCleared(name string) bool {
	switch name {
	case block.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BlockMutation) ClearEdge(name string) error {
	switch name {
	case block.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Block unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BlockMutation) ResetEdge(name string) error {
	switch name {
	case block.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Block edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	creationDate       *time.Time
	_Username          *string
	_Email             *string
	_Password          *string
	_EmailValid        *bool
	_Config            **schema.Config
	_TutorialCompleted *bool
	clearedFields      map[string]struct{}
	blocks             map[uuid.UUID]struct{}
	removedblocks      map[uuid.UUID]struct{}
	clearedblocks      bool
	codes              map[uuid.UUID]struct{}
	removedcodes       map[uuid.UUID]struct{}
	clearedcodes       bool
	done               bool
	oldValue           func(context.Context) (*User, error)
	predicates         []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreationDate sets the "creationDate" field.
func (m *UserMutation) SetCreationDate(t time.Time) {
	m.creationDate = &t
}

// CreationDate returns the value of the "creationDate" field in the mutation.
func (m *UserMutation) CreationDate() (r time.Time, exists bool) {
	v := m.creationDate
	if v == nil {
		return
	}
	return *v, true
}

// OldCreationDate returns the old "creationDate" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreationDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreationDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreationDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreationDate: %w", err)
	}
	return oldValue.CreationDate, nil
}

// ResetCreationDate resets all changes to the "creationDate" field.
func (m *UserMutation) ResetCreationDate() {
	m.creationDate = nil
}

// SetUsername sets the "Username" field.
func (m *UserMutation) SetUsername(s string) {
	m._Username = &s
}

// Username returns the value of the "Username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m._Username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "Username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "Username" field.
func (m *UserMutation) ResetUsername() {
	m._Username = nil
}

// SetEmail sets the "Email" field.
func (m *UserMutation) SetEmail(s string) {
	m._Email = &s
}

// Email returns the value of the "Email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m._Email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "Email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "Email" field.
func (m *UserMutation) ResetEmail() {
	m._Email = nil
}

// SetPassword sets the "Password" field.
func (m *UserMutation) SetPassword(s string) {
	m._Password = &s
}

// Password returns the value of the "Password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m._Password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "Password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "Password" field.
func (m *UserMutation) ResetPassword() {
	m._Password = nil
}

// SetEmailValid sets the "EmailValid" field.
func (m *UserMutation) SetEmailValid(b bool) {
	m._EmailValid = &b
}

// EmailValid returns the value of the "EmailValid" field in the mutation.
func (m *UserMutation) EmailValid() (r bool, exists bool) {
	v := m._EmailValid
	if v == nil {
		return
	}
	return *v, true
}

// OldEmailValid returns the old "EmailValid" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmailValid(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmailValid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmailValid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmailValid: %w", err)
	}
	return oldValue.EmailValid, nil
}

// ResetEmailValid resets all changes to the "EmailValid" field.
func (m *UserMutation) ResetEmailValid() {
	m._EmailValid = nil
}

// SetConfig sets the "Config" field.
func (m *UserMutation) SetConfig(s *schema.Config) {
	m._Config = &s
}

// Config returns the value of the "Config" field in the mutation.
func (m *UserMutation) Config() (r *schema.Config, exists bool) {
	v := m._Config
	if v == nil {
		return
	}
	return *v, true
}

// OldConfig returns the old "Config" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldConfig(ctx context.Context) (v *schema.Config, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConfig is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConfig requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfig: %w", err)
	}
	return oldValue.Config, nil
}

// ResetConfig resets all changes to the "Config" field.
func (m *UserMutation) ResetConfig() {
	m._Config = nil
}

// SetTutorialCompleted sets the "TutorialCompleted" field.
func (m *UserMutation) SetTutorialCompleted(b bool) {
	m._TutorialCompleted = &b
}

// TutorialCompleted returns the value of the "TutorialCompleted" field in the mutation.
func (m *UserMutation) TutorialCompleted() (r bool, exists bool) {
	v := m._TutorialCompleted
	if v == nil {
		return
	}
	return *v, true
}

// OldTutorialCompleted returns the old "TutorialCompleted" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTutorialCompleted(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTutorialCompleted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTutorialCompleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTutorialCompleted: %w", err)
	}
	return oldValue.TutorialCompleted, nil
}

// ResetTutorialCompleted resets all changes to the "TutorialCompleted" field.
func (m *UserMutation) ResetTutorialCompleted() {
	m._TutorialCompleted = nil
}

// AddBlockIDs adds the "blocks" edge to the Block entity by ids.
func (m *UserMutation) AddBlockIDs(ids ...uuid.UUID) {
	if m.blocks == nil {
		m.blocks = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.blocks[ids[i]] = struct{}{}
	}
}

// ClearBlocks clears the "blocks" edge to the Block entity.
func (m *UserMutation) ClearBlocks() {
	m.clearedblocks = true
}

// BlocksCleared reports if the "blocks" edge to the Block entity was cleared.
func (m *UserMutation) BlocksCleared() bool {
	return m.clearedblocks
}

// RemoveBlockIDs removes the "blocks" edge to the Block entity by IDs.
func (m *UserMutation) RemoveBlockIDs(ids ...uuid.UUID) {
	if m.removedblocks == nil {
		m.removedblocks = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.blocks, ids[i])
		m.removedblocks[ids[i]] = struct{}{}
	}
}

// RemovedBlocks returns the removed IDs of the "blocks" edge to the Block entity.
func (m *UserMutation) RemovedBlocksIDs() (ids []uuid.UUID) {
	for id := range m.removedblocks {
		ids = append(ids, id)
	}
	return
}

// BlocksIDs returns the "blocks" edge IDs in the mutation.
func (m *UserMutation) BlocksIDs() (ids []uuid.UUID) {
	for id := range m.blocks {
		ids = append(ids, id)
	}
	return
}

// ResetBlocks resets all changes to the "blocks" edge.
func (m *UserMutation) ResetBlocks() {
	m.blocks = nil
	m.clearedblocks = false
	m.removedblocks = nil
}

// AddCodeIDs adds the "codes" edge to the VerificationCode entity by ids.
func (m *UserMutation) AddCodeIDs(ids ...uuid.UUID) {
	if m.codes == nil {
		m.codes = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.codes[ids[i]] = struct{}{}
	}
}

// ClearCodes clears the "codes" edge to the VerificationCode entity.
func (m *UserMutation) ClearCodes() {
	m.clearedcodes = true
}

// CodesCleared reports if the "codes" edge to the VerificationCode entity was cleared.
func (m *UserMutation) CodesCleared() bool {
	return m.clearedcodes
}

// RemoveCodeIDs removes the "codes" edge to the VerificationCode entity by IDs.
func (m *UserMutation) RemoveCodeIDs(ids ...uuid.UUID) {
	if m.removedcodes == nil {
		m.removedcodes = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.codes, ids[i])
		m.removedcodes[ids[i]] = struct{}{}
	}
}

// RemovedCodes returns the removed IDs of the "codes" edge to the VerificationCode entity.
func (m *UserMutation) RemovedCodesIDs() (ids []uuid.UUID) {
	for id := range m.removedcodes {
		ids = append(ids, id)
	}
	return
}

// CodesIDs returns the "codes" edge IDs in the mutation.
func (m *UserMutation) CodesIDs() (ids []uuid.UUID) {
	for id := range m.codes {
		ids = append(ids, id)
	}
	return
}

// ResetCodes resets all changes to the "codes" edge.
func (m *UserMutation) ResetCodes() {
	m.codes = nil
	m.clearedcodes = false
	m.removedcodes = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.creationDate != nil {
		fields = append(fields, user.FieldCreationDate)
	}
	if m._Username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m._Email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m._Password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m._EmailValid != nil {
		fields = append(fields, user.FieldEmailValid)
	}
	if m._Config != nil {
		fields = append(fields, user.FieldConfig)
	}
	if m._TutorialCompleted != nil {
		fields = append(fields, user.FieldTutorialCompleted)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreationDate:
		return m.CreationDate()
	case user.FieldUsername:
		return m.Username()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPassword:
		return m.Password()
	case user.FieldEmailValid:
		return m.EmailValid()
	case user.FieldConfig:
		return m.Config()
	case user.FieldTutorialCompleted:
		return m.TutorialCompleted()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreationDate:
		return m.OldCreationDate(ctx)
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldEmailValid:
		return m.OldEmailValid(ctx)
	case user.FieldConfig:
		return m.OldConfig(ctx)
	case user.FieldTutorialCompleted:
		return m.OldTutorialCompleted(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreationDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreationDate(v)
		return nil
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldEmailValid:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmailValid(v)
		return nil
	case user.FieldConfig:
		v, ok := value.(*schema.Config)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfig(v)
		return nil
	case user.FieldTutorialCompleted:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTutorialCompleted(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreationDate:
		m.ResetCreationDate()
		return nil
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldEmailValid:
		m.ResetEmailValid()
		return nil
	case user.FieldConfig:
		m.ResetConfig()
		return nil
	case user.FieldTutorialCompleted:
		m.ResetTutorialCompleted()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.blocks != nil {
		edges = append(edges, user.EdgeBlocks)
	}
	if m.codes != nil {
		edges = append(edges, user.EdgeCodes)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeBlocks:
		ids := make([]ent.Value, 0, len(m.blocks))
		for id := range m.blocks {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCodes:
		ids := make([]ent.Value, 0, len(m.codes))
		for id := range m.codes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedblocks != nil {
		edges = append(edges, user.EdgeBlocks)
	}
	if m.removedcodes != nil {
		edges = append(edges, user.EdgeCodes)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeBlocks:
		ids := make([]ent.Value, 0, len(m.removedblocks))
		for id := range m.removedblocks {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCodes:
		ids := make([]ent.Value, 0, len(m.removedcodes))
		for id := range m.removedcodes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedblocks {
		edges = append(edges, user.EdgeBlocks)
	}
	if m.clearedcodes {
		edges = append(edges, user.EdgeCodes)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeBlocks:
		return m.clearedblocks
	case user.EdgeCodes:
		return m.clearedcodes
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeBlocks:
		m.ResetBlocks()
		return nil
	case user.EdgeCodes:
		m.ResetCodes()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// VerificationCodeMutation represents an operation that mutates the VerificationCode nodes in the graph.
type VerificationCodeMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	creationDate  *time.Time
	_type         *string
	code          *string
	expireDate    *time.Time
	valid         *bool
	clearedFields map[string]struct{}
	user          *uuid.UUID
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*VerificationCode, error)
	predicates    []predicate.VerificationCode
}

var _ ent.Mutation = (*VerificationCodeMutation)(nil)

// verificationcodeOption allows management of the mutation configuration using functional options.
type verificationcodeOption func(*VerificationCodeMutation)

// newVerificationCodeMutation creates new mutation for the VerificationCode entity.
func newVerificationCodeMutation(c config, op Op, opts ...verificationcodeOption) *VerificationCodeMutation {
	m := &VerificationCodeMutation{
		config:        c,
		op:            op,
		typ:           TypeVerificationCode,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVerificationCodeID sets the ID field of the mutation.
func withVerificationCodeID(id uuid.UUID) verificationcodeOption {
	return func(m *VerificationCodeMutation) {
		var (
			err   error
			once  sync.Once
			value *VerificationCode
		)
		m.oldValue = func(ctx context.Context) (*VerificationCode, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().VerificationCode.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVerificationCode sets the old VerificationCode of the mutation.
func withVerificationCode(node *VerificationCode) verificationcodeOption {
	return func(m *VerificationCodeMutation) {
		m.oldValue = func(context.Context) (*VerificationCode, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VerificationCodeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VerificationCodeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of VerificationCode entities.
func (m *VerificationCodeMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VerificationCodeMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VerificationCodeMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().VerificationCode.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreationDate sets the "creationDate" field.
func (m *VerificationCodeMutation) SetCreationDate(t time.Time) {
	m.creationDate = &t
}

// CreationDate returns the value of the "creationDate" field in the mutation.
func (m *VerificationCodeMutation) CreationDate() (r time.Time, exists bool) {
	v := m.creationDate
	if v == nil {
		return
	}
	return *v, true
}

// OldCreationDate returns the old "creationDate" field's value of the VerificationCode entity.
// If the VerificationCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VerificationCodeMutation) OldCreationDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreationDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreationDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreationDate: %w", err)
	}
	return oldValue.CreationDate, nil
}

// ResetCreationDate resets all changes to the "creationDate" field.
func (m *VerificationCodeMutation) ResetCreationDate() {
	m.creationDate = nil
}

// SetType sets the "type" field.
func (m *VerificationCodeMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *VerificationCodeMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the VerificationCode entity.
// If the VerificationCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VerificationCodeMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *VerificationCodeMutation) ResetType() {
	m._type = nil
}

// SetCode sets the "code" field.
func (m *VerificationCodeMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *VerificationCodeMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the VerificationCode entity.
// If the VerificationCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VerificationCodeMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *VerificationCodeMutation) ResetCode() {
	m.code = nil
}

// SetExpireDate sets the "expireDate" field.
func (m *VerificationCodeMutation) SetExpireDate(t time.Time) {
	m.expireDate = &t
}

// ExpireDate returns the value of the "expireDate" field in the mutation.
func (m *VerificationCodeMutation) ExpireDate() (r time.Time, exists bool) {
	v := m.expireDate
	if v == nil {
		return
	}
	return *v, true
}

// OldExpireDate returns the old "expireDate" field's value of the VerificationCode entity.
// If the VerificationCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VerificationCodeMutation) OldExpireDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpireDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpireDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpireDate: %w", err)
	}
	return oldValue.ExpireDate, nil
}

// ResetExpireDate resets all changes to the "expireDate" field.
func (m *VerificationCodeMutation) ResetExpireDate() {
	m.expireDate = nil
}

// SetValid sets the "valid" field.
func (m *VerificationCodeMutation) SetValid(b bool) {
	m.valid = &b
}

// Valid returns the value of the "valid" field in the mutation.
func (m *VerificationCodeMutation) Valid() (r bool, exists bool) {
	v := m.valid
	if v == nil {
		return
	}
	return *v, true
}

// OldValid returns the old "valid" field's value of the VerificationCode entity.
// If the VerificationCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VerificationCodeMutation) OldValid(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValid: %w", err)
	}
	return oldValue.Valid, nil
}

// ResetValid resets all changes to the "valid" field.
func (m *VerificationCodeMutation) ResetValid() {
	m.valid = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *VerificationCodeMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *VerificationCodeMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *VerificationCodeMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *VerificationCodeMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *VerificationCodeMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *VerificationCodeMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the VerificationCodeMutation builder.
func (m *VerificationCodeMutation) Where(ps ...predicate.VerificationCode) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the VerificationCodeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *VerificationCodeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.VerificationCode, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *VerificationCodeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *VerificationCodeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (VerificationCode).
func (m *VerificationCodeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VerificationCodeMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.creationDate != nil {
		fields = append(fields, verificationcode.FieldCreationDate)
	}
	if m._type != nil {
		fields = append(fields, verificationcode.FieldType)
	}
	if m.code != nil {
		fields = append(fields, verificationcode.FieldCode)
	}
	if m.expireDate != nil {
		fields = append(fields, verificationcode.FieldExpireDate)
	}
	if m.valid != nil {
		fields = append(fields, verificationcode.FieldValid)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VerificationCodeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case verificationcode.FieldCreationDate:
		return m.CreationDate()
	case verificationcode.FieldType:
		return m.GetType()
	case verificationcode.FieldCode:
		return m.Code()
	case verificationcode.FieldExpireDate:
		return m.ExpireDate()
	case verificationcode.FieldValid:
		return m.Valid()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VerificationCodeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case verificationcode.FieldCreationDate:
		return m.OldCreationDate(ctx)
	case verificationcode.FieldType:
		return m.OldType(ctx)
	case verificationcode.FieldCode:
		return m.OldCode(ctx)
	case verificationcode.FieldExpireDate:
		return m.OldExpireDate(ctx)
	case verificationcode.FieldValid:
		return m.OldValid(ctx)
	}
	return nil, fmt.Errorf("unknown VerificationCode field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VerificationCodeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case verificationcode.FieldCreationDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreationDate(v)
		return nil
	case verificationcode.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case verificationcode.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case verificationcode.FieldExpireDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpireDate(v)
		return nil
	case verificationcode.FieldValid:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValid(v)
		return nil
	}
	return fmt.Errorf("unknown VerificationCode field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VerificationCodeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VerificationCodeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VerificationCodeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown VerificationCode numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VerificationCodeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VerificationCodeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VerificationCodeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown VerificationCode nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VerificationCodeMutation) ResetField(name string) error {
	switch name {
	case verificationcode.FieldCreationDate:
		m.ResetCreationDate()
		return nil
	case verificationcode.FieldType:
		m.ResetType()
		return nil
	case verificationcode.FieldCode:
		m.ResetCode()
		return nil
	case verificationcode.FieldExpireDate:
		m.ResetExpireDate()
		return nil
	case verificationcode.FieldValid:
		m.ResetValid()
		return nil
	}
	return fmt.Errorf("unknown VerificationCode field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VerificationCodeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, verificationcode.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VerificationCodeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case verificationcode.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VerificationCodeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VerificationCodeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VerificationCodeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, verificationcode.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VerificationCodeMutation) EdgeCleared(name string) bool {
	switch name {
	case verificationcode.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VerificationCodeMutation) ClearEdge(name string) error {
	switch name {
	case verificationcode.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown VerificationCode unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VerificationCodeMutation) ResetEdge(name string) error {
	switch name {
	case verificationcode.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown VerificationCode edge %s", name)
}
