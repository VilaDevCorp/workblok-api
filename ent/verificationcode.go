// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"workblok/ent/user"
	"workblok/ent/verificationcode"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// VerificationCode is the model entity for the VerificationCode schema.
type VerificationCode struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreationDate holds the value of the "creationDate" field.
	CreationDate time.Time `json:"creationDate,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// ExpireDate holds the value of the "expireDate" field.
	ExpireDate time.Time `json:"expireDate,omitempty"`
	// Valid holds the value of the "valid" field.
	Valid bool `json:"valid,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VerificationCodeQuery when eager-loading is set.
	Edges        VerificationCodeEdges `json:"edges"`
	user_codes   *uuid.UUID
	selectValues sql.SelectValues
}

// VerificationCodeEdges holds the relations/edges for other nodes in the graph.
type VerificationCodeEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VerificationCodeEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VerificationCode) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case verificationcode.FieldValid:
			values[i] = new(sql.NullBool)
		case verificationcode.FieldType, verificationcode.FieldCode:
			values[i] = new(sql.NullString)
		case verificationcode.FieldCreationDate, verificationcode.FieldExpireDate:
			values[i] = new(sql.NullTime)
		case verificationcode.FieldID:
			values[i] = new(uuid.UUID)
		case verificationcode.ForeignKeys[0]: // user_codes
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VerificationCode fields.
func (vc *VerificationCode) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case verificationcode.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				vc.ID = *value
			}
		case verificationcode.FieldCreationDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field creationDate", values[i])
			} else if value.Valid {
				vc.CreationDate = value.Time
			}
		case verificationcode.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				vc.Type = value.String
			}
		case verificationcode.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				vc.Code = value.String
			}
		case verificationcode.FieldExpireDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expireDate", values[i])
			} else if value.Valid {
				vc.ExpireDate = value.Time
			}
		case verificationcode.FieldValid:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field valid", values[i])
			} else if value.Valid {
				vc.Valid = value.Bool
			}
		case verificationcode.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_codes", values[i])
			} else if value.Valid {
				vc.user_codes = new(uuid.UUID)
				*vc.user_codes = *value.S.(*uuid.UUID)
			}
		default:
			vc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VerificationCode.
// This includes values selected through modifiers, order, etc.
func (vc *VerificationCode) Value(name string) (ent.Value, error) {
	return vc.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the VerificationCode entity.
func (vc *VerificationCode) QueryUser() *UserQuery {
	return NewVerificationCodeClient(vc.config).QueryUser(vc)
}

// Update returns a builder for updating this VerificationCode.
// Note that you need to call VerificationCode.Unwrap() before calling this method if this VerificationCode
// was returned from a transaction, and the transaction was committed or rolled back.
func (vc *VerificationCode) Update() *VerificationCodeUpdateOne {
	return NewVerificationCodeClient(vc.config).UpdateOne(vc)
}

// Unwrap unwraps the VerificationCode entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vc *VerificationCode) Unwrap() *VerificationCode {
	_tx, ok := vc.config.driver.(*txDriver)
	if !ok {
		panic("ent: VerificationCode is not a transactional entity")
	}
	vc.config.driver = _tx.drv
	return vc
}

// String implements the fmt.Stringer.
func (vc *VerificationCode) String() string {
	var builder strings.Builder
	builder.WriteString("VerificationCode(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vc.ID))
	builder.WriteString("creationDate=")
	builder.WriteString(vc.CreationDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(vc.Type)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(vc.Code)
	builder.WriteString(", ")
	builder.WriteString("expireDate=")
	builder.WriteString(vc.ExpireDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("valid=")
	builder.WriteString(fmt.Sprintf("%v", vc.Valid))
	builder.WriteByte(')')
	return builder.String()
}

// VerificationCodes is a parsable slice of VerificationCode.
type VerificationCodes []*VerificationCode
