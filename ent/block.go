// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"workblok/ent/block"
	"workblok/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Block is the model entity for the Block schema.
type Block struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreationDate holds the value of the "creationDate" field.
	CreationDate time.Time `json:"creationDate,omitempty"`
	// FinishDate holds the value of the "finishDate" field.
	FinishDate *time.Time `json:"finishDate,omitempty"`
	// TargetMinutes holds the value of the "targetMinutes" field.
	TargetMinutes int `json:"targetMinutes,omitempty"`
	// DistractionMinutes holds the value of the "distractionMinutes" field.
	DistractionMinutes int `json:"distractionMinutes,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BlockQuery when eager-loading is set.
	Edges        BlockEdges `json:"edges"`
	user_blocks  *uuid.UUID
	selectValues sql.SelectValues
}

// BlockEdges holds the relations/edges for other nodes in the graph.
type BlockEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BlockEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Block) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case block.FieldTargetMinutes, block.FieldDistractionMinutes:
			values[i] = new(sql.NullInt64)
		case block.FieldCreationDate, block.FieldFinishDate:
			values[i] = new(sql.NullTime)
		case block.FieldID:
			values[i] = new(uuid.UUID)
		case block.ForeignKeys[0]: // user_blocks
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Block fields.
func (b *Block) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case block.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				b.ID = *value
			}
		case block.FieldCreationDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field creationDate", values[i])
			} else if value.Valid {
				b.CreationDate = value.Time
			}
		case block.FieldFinishDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field finishDate", values[i])
			} else if value.Valid {
				b.FinishDate = new(time.Time)
				*b.FinishDate = value.Time
			}
		case block.FieldTargetMinutes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field targetMinutes", values[i])
			} else if value.Valid {
				b.TargetMinutes = int(value.Int64)
			}
		case block.FieldDistractionMinutes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field distractionMinutes", values[i])
			} else if value.Valid {
				b.DistractionMinutes = int(value.Int64)
			}
		case block.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_blocks", values[i])
			} else if value.Valid {
				b.user_blocks = new(uuid.UUID)
				*b.user_blocks = *value.S.(*uuid.UUID)
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Block.
// This includes values selected through modifiers, order, etc.
func (b *Block) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Block entity.
func (b *Block) QueryUser() *UserQuery {
	return NewBlockClient(b.config).QueryUser(b)
}

// Update returns a builder for updating this Block.
// Note that you need to call Block.Unwrap() before calling this method if this Block
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Block) Update() *BlockUpdateOne {
	return NewBlockClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Block entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Block) Unwrap() *Block {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Block is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Block) String() string {
	var builder strings.Builder
	builder.WriteString("Block(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("creationDate=")
	builder.WriteString(b.CreationDate.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := b.FinishDate; v != nil {
		builder.WriteString("finishDate=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("targetMinutes=")
	builder.WriteString(fmt.Sprintf("%v", b.TargetMinutes))
	builder.WriteString(", ")
	builder.WriteString("distractionMinutes=")
	builder.WriteString(fmt.Sprintf("%v", b.DistractionMinutes))
	builder.WriteByte(')')
	return builder.String()
}

// Blocks is a parsable slice of Block.
type Blocks []*Block
