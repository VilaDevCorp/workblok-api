// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"workblok/ent/block"
	"workblok/ent/predicate"
	"workblok/ent/user"
	"workblok/ent/verificationcode"
	"workblok/schema"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUsername sets the "Username" field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.mutation.SetUsername(s)
	return uu
}

// SetEmail sets the "Email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetPassword sets the "Password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetEmailValid sets the "EmailValid" field.
func (uu *UserUpdate) SetEmailValid(b bool) *UserUpdate {
	uu.mutation.SetEmailValid(b)
	return uu
}

// SetNillableEmailValid sets the "EmailValid" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmailValid(b *bool) *UserUpdate {
	if b != nil {
		uu.SetEmailValid(*b)
	}
	return uu
}

// SetConfig sets the "Config" field.
func (uu *UserUpdate) SetConfig(s *schema.Config) *UserUpdate {
	uu.mutation.SetConfig(s)
	return uu
}

// SetTutorialCompleted sets the "TutorialCompleted" field.
func (uu *UserUpdate) SetTutorialCompleted(b bool) *UserUpdate {
	uu.mutation.SetTutorialCompleted(b)
	return uu
}

// SetNillableTutorialCompleted sets the "TutorialCompleted" field if the given value is not nil.
func (uu *UserUpdate) SetNillableTutorialCompleted(b *bool) *UserUpdate {
	if b != nil {
		uu.SetTutorialCompleted(*b)
	}
	return uu
}

// AddBlockIDs adds the "blocks" edge to the Block entity by IDs.
func (uu *UserUpdate) AddBlockIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddBlockIDs(ids...)
	return uu
}

// AddBlocks adds the "blocks" edges to the Block entity.
func (uu *UserUpdate) AddBlocks(b ...*Block) *UserUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uu.AddBlockIDs(ids...)
}

// AddCodeIDs adds the "codes" edge to the VerificationCode entity by IDs.
func (uu *UserUpdate) AddCodeIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddCodeIDs(ids...)
	return uu
}

// AddCodes adds the "codes" edges to the VerificationCode entity.
func (uu *UserUpdate) AddCodes(v ...*VerificationCode) *UserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uu.AddCodeIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearBlocks clears all "blocks" edges to the Block entity.
func (uu *UserUpdate) ClearBlocks() *UserUpdate {
	uu.mutation.ClearBlocks()
	return uu
}

// RemoveBlockIDs removes the "blocks" edge to Block entities by IDs.
func (uu *UserUpdate) RemoveBlockIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveBlockIDs(ids...)
	return uu
}

// RemoveBlocks removes "blocks" edges to Block entities.
func (uu *UserUpdate) RemoveBlocks(b ...*Block) *UserUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uu.RemoveBlockIDs(ids...)
}

// ClearCodes clears all "codes" edges to the VerificationCode entity.
func (uu *UserUpdate) ClearCodes() *UserUpdate {
	uu.mutation.ClearCodes()
	return uu
}

// RemoveCodeIDs removes the "codes" edge to VerificationCode entities by IDs.
func (uu *UserUpdate) RemoveCodeIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveCodeIDs(ids...)
	return uu
}

// RemoveCodes removes "codes" edges to VerificationCode entities.
func (uu *UserUpdate) RemoveCodes(v ...*VerificationCode) *UserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uu.RemoveCodeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, UserMutation](ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "Username", err: fmt.Errorf(`ent: validator failed for field "User.Username": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "Email", err: fmt.Errorf(`ent: validator failed for field "User.Email": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Password(); ok {
		if err := user.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "Password", err: fmt.Errorf(`ent: validator failed for field "User.Password": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uu.mutation.EmailValid(); ok {
		_spec.SetField(user.FieldEmailValid, field.TypeBool, value)
	}
	if value, ok := uu.mutation.Config(); ok {
		_spec.SetField(user.FieldConfig, field.TypeJSON, value)
	}
	if value, ok := uu.mutation.TutorialCompleted(); ok {
		_spec.SetField(user.FieldTutorialCompleted, field.TypeBool, value)
	}
	if uu.mutation.BlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BlocksTable,
			Columns: []string{user.BlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(block.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedBlocksIDs(); len(nodes) > 0 && !uu.mutation.BlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BlocksTable,
			Columns: []string{user.BlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(block.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.BlocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BlocksTable,
			Columns: []string{user.BlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(block.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CodesTable,
			Columns: []string{user.CodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(verificationcode.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCodesIDs(); len(nodes) > 0 && !uu.mutation.CodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CodesTable,
			Columns: []string{user.CodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(verificationcode.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CodesTable,
			Columns: []string{user.CodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(verificationcode.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUsername sets the "Username" field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.mutation.SetUsername(s)
	return uuo
}

// SetEmail sets the "Email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetPassword sets the "Password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetEmailValid sets the "EmailValid" field.
func (uuo *UserUpdateOne) SetEmailValid(b bool) *UserUpdateOne {
	uuo.mutation.SetEmailValid(b)
	return uuo
}

// SetNillableEmailValid sets the "EmailValid" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmailValid(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetEmailValid(*b)
	}
	return uuo
}

// SetConfig sets the "Config" field.
func (uuo *UserUpdateOne) SetConfig(s *schema.Config) *UserUpdateOne {
	uuo.mutation.SetConfig(s)
	return uuo
}

// SetTutorialCompleted sets the "TutorialCompleted" field.
func (uuo *UserUpdateOne) SetTutorialCompleted(b bool) *UserUpdateOne {
	uuo.mutation.SetTutorialCompleted(b)
	return uuo
}

// SetNillableTutorialCompleted sets the "TutorialCompleted" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTutorialCompleted(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetTutorialCompleted(*b)
	}
	return uuo
}

// AddBlockIDs adds the "blocks" edge to the Block entity by IDs.
func (uuo *UserUpdateOne) AddBlockIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddBlockIDs(ids...)
	return uuo
}

// AddBlocks adds the "blocks" edges to the Block entity.
func (uuo *UserUpdateOne) AddBlocks(b ...*Block) *UserUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uuo.AddBlockIDs(ids...)
}

// AddCodeIDs adds the "codes" edge to the VerificationCode entity by IDs.
func (uuo *UserUpdateOne) AddCodeIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddCodeIDs(ids...)
	return uuo
}

// AddCodes adds the "codes" edges to the VerificationCode entity.
func (uuo *UserUpdateOne) AddCodes(v ...*VerificationCode) *UserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uuo.AddCodeIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearBlocks clears all "blocks" edges to the Block entity.
func (uuo *UserUpdateOne) ClearBlocks() *UserUpdateOne {
	uuo.mutation.ClearBlocks()
	return uuo
}

// RemoveBlockIDs removes the "blocks" edge to Block entities by IDs.
func (uuo *UserUpdateOne) RemoveBlockIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveBlockIDs(ids...)
	return uuo
}

// RemoveBlocks removes "blocks" edges to Block entities.
func (uuo *UserUpdateOne) RemoveBlocks(b ...*Block) *UserUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uuo.RemoveBlockIDs(ids...)
}

// ClearCodes clears all "codes" edges to the VerificationCode entity.
func (uuo *UserUpdateOne) ClearCodes() *UserUpdateOne {
	uuo.mutation.ClearCodes()
	return uuo
}

// RemoveCodeIDs removes the "codes" edge to VerificationCode entities by IDs.
func (uuo *UserUpdateOne) RemoveCodeIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveCodeIDs(ids...)
	return uuo
}

// RemoveCodes removes "codes" edges to VerificationCode entities.
func (uuo *UserUpdateOne) RemoveCodes(v ...*VerificationCode) *UserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uuo.RemoveCodeIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks[*User, UserMutation](ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "Username", err: fmt.Errorf(`ent: validator failed for field "User.Username": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "Email", err: fmt.Errorf(`ent: validator failed for field "User.Email": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Password(); ok {
		if err := user.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "Password", err: fmt.Errorf(`ent: validator failed for field "User.Password": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uuo.mutation.EmailValid(); ok {
		_spec.SetField(user.FieldEmailValid, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.Config(); ok {
		_spec.SetField(user.FieldConfig, field.TypeJSON, value)
	}
	if value, ok := uuo.mutation.TutorialCompleted(); ok {
		_spec.SetField(user.FieldTutorialCompleted, field.TypeBool, value)
	}
	if uuo.mutation.BlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BlocksTable,
			Columns: []string{user.BlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(block.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedBlocksIDs(); len(nodes) > 0 && !uuo.mutation.BlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BlocksTable,
			Columns: []string{user.BlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(block.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.BlocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BlocksTable,
			Columns: []string{user.BlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(block.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CodesTable,
			Columns: []string{user.CodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(verificationcode.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCodesIDs(); len(nodes) > 0 && !uuo.mutation.CodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CodesTable,
			Columns: []string{user.CodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(verificationcode.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CodesTable,
			Columns: []string{user.CodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(verificationcode.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
