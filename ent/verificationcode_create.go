// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"workblok/ent/user"
	"workblok/ent/verificationcode"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// VerificationCodeCreate is the builder for creating a VerificationCode entity.
type VerificationCodeCreate struct {
	config
	mutation *VerificationCodeMutation
	hooks    []Hook
}

// SetCreationDate sets the "creationDate" field.
func (vcc *VerificationCodeCreate) SetCreationDate(t time.Time) *VerificationCodeCreate {
	vcc.mutation.SetCreationDate(t)
	return vcc
}

// SetNillableCreationDate sets the "creationDate" field if the given value is not nil.
func (vcc *VerificationCodeCreate) SetNillableCreationDate(t *time.Time) *VerificationCodeCreate {
	if t != nil {
		vcc.SetCreationDate(*t)
	}
	return vcc
}

// SetType sets the "type" field.
func (vcc *VerificationCodeCreate) SetType(s string) *VerificationCodeCreate {
	vcc.mutation.SetType(s)
	return vcc
}

// SetCode sets the "code" field.
func (vcc *VerificationCodeCreate) SetCode(s string) *VerificationCodeCreate {
	vcc.mutation.SetCode(s)
	return vcc
}

// SetExpireDate sets the "expireDate" field.
func (vcc *VerificationCodeCreate) SetExpireDate(t time.Time) *VerificationCodeCreate {
	vcc.mutation.SetExpireDate(t)
	return vcc
}

// SetValid sets the "valid" field.
func (vcc *VerificationCodeCreate) SetValid(b bool) *VerificationCodeCreate {
	vcc.mutation.SetValid(b)
	return vcc
}

// SetID sets the "id" field.
func (vcc *VerificationCodeCreate) SetID(u uuid.UUID) *VerificationCodeCreate {
	vcc.mutation.SetID(u)
	return vcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (vcc *VerificationCodeCreate) SetNillableID(u *uuid.UUID) *VerificationCodeCreate {
	if u != nil {
		vcc.SetID(*u)
	}
	return vcc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (vcc *VerificationCodeCreate) SetUserID(id uuid.UUID) *VerificationCodeCreate {
	vcc.mutation.SetUserID(id)
	return vcc
}

// SetUser sets the "user" edge to the User entity.
func (vcc *VerificationCodeCreate) SetUser(u *User) *VerificationCodeCreate {
	return vcc.SetUserID(u.ID)
}

// Mutation returns the VerificationCodeMutation object of the builder.
func (vcc *VerificationCodeCreate) Mutation() *VerificationCodeMutation {
	return vcc.mutation
}

// Save creates the VerificationCode in the database.
func (vcc *VerificationCodeCreate) Save(ctx context.Context) (*VerificationCode, error) {
	vcc.defaults()
	return withHooks[*VerificationCode, VerificationCodeMutation](ctx, vcc.sqlSave, vcc.mutation, vcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vcc *VerificationCodeCreate) SaveX(ctx context.Context) *VerificationCode {
	v, err := vcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcc *VerificationCodeCreate) Exec(ctx context.Context) error {
	_, err := vcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcc *VerificationCodeCreate) ExecX(ctx context.Context) {
	if err := vcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vcc *VerificationCodeCreate) defaults() {
	if _, ok := vcc.mutation.CreationDate(); !ok {
		v := verificationcode.DefaultCreationDate()
		vcc.mutation.SetCreationDate(v)
	}
	if _, ok := vcc.mutation.ID(); !ok {
		v := verificationcode.DefaultID()
		vcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vcc *VerificationCodeCreate) check() error {
	if _, ok := vcc.mutation.CreationDate(); !ok {
		return &ValidationError{Name: "creationDate", err: errors.New(`ent: missing required field "VerificationCode.creationDate"`)}
	}
	if _, ok := vcc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "VerificationCode.type"`)}
	}
	if v, ok := vcc.mutation.GetType(); ok {
		if err := verificationcode.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "VerificationCode.type": %w`, err)}
		}
	}
	if _, ok := vcc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "VerificationCode.code"`)}
	}
	if v, ok := vcc.mutation.Code(); ok {
		if err := verificationcode.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "VerificationCode.code": %w`, err)}
		}
	}
	if _, ok := vcc.mutation.ExpireDate(); !ok {
		return &ValidationError{Name: "expireDate", err: errors.New(`ent: missing required field "VerificationCode.expireDate"`)}
	}
	if _, ok := vcc.mutation.Valid(); !ok {
		return &ValidationError{Name: "valid", err: errors.New(`ent: missing required field "VerificationCode.valid"`)}
	}
	if _, ok := vcc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "VerificationCode.user"`)}
	}
	return nil
}

func (vcc *VerificationCodeCreate) sqlSave(ctx context.Context) (*VerificationCode, error) {
	if err := vcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	vcc.mutation.id = &_node.ID
	vcc.mutation.done = true
	return _node, nil
}

func (vcc *VerificationCodeCreate) createSpec() (*VerificationCode, *sqlgraph.CreateSpec) {
	var (
		_node = &VerificationCode{config: vcc.config}
		_spec = sqlgraph.NewCreateSpec(verificationcode.Table, sqlgraph.NewFieldSpec(verificationcode.FieldID, field.TypeUUID))
	)
	if id, ok := vcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := vcc.mutation.CreationDate(); ok {
		_spec.SetField(verificationcode.FieldCreationDate, field.TypeTime, value)
		_node.CreationDate = value
	}
	if value, ok := vcc.mutation.GetType(); ok {
		_spec.SetField(verificationcode.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := vcc.mutation.Code(); ok {
		_spec.SetField(verificationcode.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := vcc.mutation.ExpireDate(); ok {
		_spec.SetField(verificationcode.FieldExpireDate, field.TypeTime, value)
		_node.ExpireDate = value
	}
	if value, ok := vcc.mutation.Valid(); ok {
		_spec.SetField(verificationcode.FieldValid, field.TypeBool, value)
		_node.Valid = value
	}
	if nodes := vcc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   verificationcode.UserTable,
			Columns: []string{verificationcode.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_codes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VerificationCodeCreateBulk is the builder for creating many VerificationCode entities in bulk.
type VerificationCodeCreateBulk struct {
	config
	builders []*VerificationCodeCreate
}

// Save creates the VerificationCode entities in the database.
func (vccb *VerificationCodeCreateBulk) Save(ctx context.Context) ([]*VerificationCode, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vccb.builders))
	nodes := make([]*VerificationCode, len(vccb.builders))
	mutators := make([]Mutator, len(vccb.builders))
	for i := range vccb.builders {
		func(i int, root context.Context) {
			builder := vccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VerificationCodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vccb *VerificationCodeCreateBulk) SaveX(ctx context.Context) []*VerificationCode {
	v, err := vccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vccb *VerificationCodeCreateBulk) Exec(ctx context.Context) error {
	_, err := vccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vccb *VerificationCodeCreateBulk) ExecX(ctx context.Context) {
	if err := vccb.Exec(ctx); err != nil {
		panic(err)
	}
}
