// Code generated by ent, DO NOT EDIT.

package verificationcode

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the verificationcode type in the database.
	Label = "verification_code"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreationDate holds the string denoting the creationdate field in the database.
	FieldCreationDate = "creation_date"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldExpireDate holds the string denoting the expiredate field in the database.
	FieldExpireDate = "expire_date"
	// FieldValid holds the string denoting the valid field in the database.
	FieldValid = "valid"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the verificationcode in the database.
	Table = "verification_codes"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "verification_codes"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_codes"
)

// Columns holds all SQL columns for verificationcode fields.
var Columns = []string{
	FieldID,
	FieldCreationDate,
	FieldType,
	FieldCode,
	FieldExpireDate,
	FieldValid,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "verification_codes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_codes",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreationDate holds the default value on creation for the "creationDate" field.
	DefaultCreationDate func() time.Time
	// TypeValidator is a validator for the "type" field. It is called by the builders before save.
	TypeValidator func(string) error
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the VerificationCode queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreationDate orders the results by the creationDate field.
func ByCreationDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreationDate, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByExpireDate orders the results by the expireDate field.
func ByExpireDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpireDate, opts...).ToFunc()
}

// ByValid orders the results by the valid field.
func ByValid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValid, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
