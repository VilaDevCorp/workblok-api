// Code generated by ent, DO NOT EDIT.

package verificationcode

import (
	"time"
	"workblok/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldLTE(FieldID, id))
}

// CreationDate applies equality check predicate on the "creationDate" field. It's identical to CreationDateEQ.
func CreationDate(v time.Time) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldEQ(FieldCreationDate, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldEQ(FieldType, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldEQ(FieldCode, v))
}

// ExpireDate applies equality check predicate on the "expireDate" field. It's identical to ExpireDateEQ.
func ExpireDate(v time.Time) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldEQ(FieldExpireDate, v))
}

// Valid applies equality check predicate on the "valid" field. It's identical to ValidEQ.
func Valid(v bool) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldEQ(FieldValid, v))
}

// CreationDateEQ applies the EQ predicate on the "creationDate" field.
func CreationDateEQ(v time.Time) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldEQ(FieldCreationDate, v))
}

// CreationDateNEQ applies the NEQ predicate on the "creationDate" field.
func CreationDateNEQ(v time.Time) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldNEQ(FieldCreationDate, v))
}

// CreationDateIn applies the In predicate on the "creationDate" field.
func CreationDateIn(vs ...time.Time) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldIn(FieldCreationDate, vs...))
}

// CreationDateNotIn applies the NotIn predicate on the "creationDate" field.
func CreationDateNotIn(vs ...time.Time) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldNotIn(FieldCreationDate, vs...))
}

// CreationDateGT applies the GT predicate on the "creationDate" field.
func CreationDateGT(v time.Time) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldGT(FieldCreationDate, v))
}

// CreationDateGTE applies the GTE predicate on the "creationDate" field.
func CreationDateGTE(v time.Time) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldGTE(FieldCreationDate, v))
}

// CreationDateLT applies the LT predicate on the "creationDate" field.
func CreationDateLT(v time.Time) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldLT(FieldCreationDate, v))
}

// CreationDateLTE applies the LTE predicate on the "creationDate" field.
func CreationDateLTE(v time.Time) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldLTE(FieldCreationDate, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldContainsFold(FieldType, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldContainsFold(FieldCode, v))
}

// ExpireDateEQ applies the EQ predicate on the "expireDate" field.
func ExpireDateEQ(v time.Time) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldEQ(FieldExpireDate, v))
}

// ExpireDateNEQ applies the NEQ predicate on the "expireDate" field.
func ExpireDateNEQ(v time.Time) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldNEQ(FieldExpireDate, v))
}

// ExpireDateIn applies the In predicate on the "expireDate" field.
func ExpireDateIn(vs ...time.Time) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldIn(FieldExpireDate, vs...))
}

// ExpireDateNotIn applies the NotIn predicate on the "expireDate" field.
func ExpireDateNotIn(vs ...time.Time) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldNotIn(FieldExpireDate, vs...))
}

// ExpireDateGT applies the GT predicate on the "expireDate" field.
func ExpireDateGT(v time.Time) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldGT(FieldExpireDate, v))
}

// ExpireDateGTE applies the GTE predicate on the "expireDate" field.
func ExpireDateGTE(v time.Time) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldGTE(FieldExpireDate, v))
}

// ExpireDateLT applies the LT predicate on the "expireDate" field.
func ExpireDateLT(v time.Time) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldLT(FieldExpireDate, v))
}

// ExpireDateLTE applies the LTE predicate on the "expireDate" field.
func ExpireDateLTE(v time.Time) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldLTE(FieldExpireDate, v))
}

// ValidEQ applies the EQ predicate on the "valid" field.
func ValidEQ(v bool) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldEQ(FieldValid, v))
}

// ValidNEQ applies the NEQ predicate on the "valid" field.
func ValidNEQ(v bool) predicate.VerificationCode {
	return predicate.VerificationCode(sql.FieldNEQ(FieldValid, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.VerificationCode {
	return predicate.VerificationCode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.VerificationCode {
	return predicate.VerificationCode(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.VerificationCode) predicate.VerificationCode {
	return predicate.VerificationCode(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.VerificationCode) predicate.VerificationCode {
	return predicate.VerificationCode(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.VerificationCode) predicate.VerificationCode {
	return predicate.VerificationCode(func(s *sql.Selector) {
		p(s.Not())
	})
}
