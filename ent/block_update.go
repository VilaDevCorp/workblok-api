// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"workblok/ent/block"
	"workblok/ent/predicate"
	"workblok/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BlockUpdate is the builder for updating Block entities.
type BlockUpdate struct {
	config
	hooks    []Hook
	mutation *BlockMutation
}

// Where appends a list predicates to the BlockUpdate builder.
func (bu *BlockUpdate) Where(ps ...predicate.Block) *BlockUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetFinishDate sets the "finishDate" field.
func (bu *BlockUpdate) SetFinishDate(t time.Time) *BlockUpdate {
	bu.mutation.SetFinishDate(t)
	return bu
}

// SetNillableFinishDate sets the "finishDate" field if the given value is not nil.
func (bu *BlockUpdate) SetNillableFinishDate(t *time.Time) *BlockUpdate {
	if t != nil {
		bu.SetFinishDate(*t)
	}
	return bu
}

// ClearFinishDate clears the value of the "finishDate" field.
func (bu *BlockUpdate) ClearFinishDate() *BlockUpdate {
	bu.mutation.ClearFinishDate()
	return bu
}

// SetTargetMinutes sets the "targetMinutes" field.
func (bu *BlockUpdate) SetTargetMinutes(i int) *BlockUpdate {
	bu.mutation.ResetTargetMinutes()
	bu.mutation.SetTargetMinutes(i)
	return bu
}

// SetNillableTargetMinutes sets the "targetMinutes" field if the given value is not nil.
func (bu *BlockUpdate) SetNillableTargetMinutes(i *int) *BlockUpdate {
	if i != nil {
		bu.SetTargetMinutes(*i)
	}
	return bu
}

// AddTargetMinutes adds i to the "targetMinutes" field.
func (bu *BlockUpdate) AddTargetMinutes(i int) *BlockUpdate {
	bu.mutation.AddTargetMinutes(i)
	return bu
}

// SetDistractionMinutes sets the "distractionMinutes" field.
func (bu *BlockUpdate) SetDistractionMinutes(i int) *BlockUpdate {
	bu.mutation.ResetDistractionMinutes()
	bu.mutation.SetDistractionMinutes(i)
	return bu
}

// SetNillableDistractionMinutes sets the "distractionMinutes" field if the given value is not nil.
func (bu *BlockUpdate) SetNillableDistractionMinutes(i *int) *BlockUpdate {
	if i != nil {
		bu.SetDistractionMinutes(*i)
	}
	return bu
}

// AddDistractionMinutes adds i to the "distractionMinutes" field.
func (bu *BlockUpdate) AddDistractionMinutes(i int) *BlockUpdate {
	bu.mutation.AddDistractionMinutes(i)
	return bu
}

// SetTag sets the "tag" field.
func (bu *BlockUpdate) SetTag(s string) *BlockUpdate {
	bu.mutation.SetTag(s)
	return bu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (bu *BlockUpdate) SetUserID(id uuid.UUID) *BlockUpdate {
	bu.mutation.SetUserID(id)
	return bu
}

// SetUser sets the "user" edge to the User entity.
func (bu *BlockUpdate) SetUser(u *User) *BlockUpdate {
	return bu.SetUserID(u.ID)
}

// Mutation returns the BlockMutation object of the builder.
func (bu *BlockUpdate) Mutation() *BlockMutation {
	return bu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (bu *BlockUpdate) ClearUser() *BlockUpdate {
	bu.mutation.ClearUser()
	return bu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BlockUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, BlockMutation](ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BlockUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BlockUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BlockUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BlockUpdate) check() error {
	if _, ok := bu.mutation.UserID(); bu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Block.user"`)
	}
	return nil
}

func (bu *BlockUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(block.Table, block.Columns, sqlgraph.NewFieldSpec(block.FieldID, field.TypeUUID))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.FinishDate(); ok {
		_spec.SetField(block.FieldFinishDate, field.TypeTime, value)
	}
	if bu.mutation.FinishDateCleared() {
		_spec.ClearField(block.FieldFinishDate, field.TypeTime)
	}
	if value, ok := bu.mutation.TargetMinutes(); ok {
		_spec.SetField(block.FieldTargetMinutes, field.TypeInt, value)
	}
	if value, ok := bu.mutation.AddedTargetMinutes(); ok {
		_spec.AddField(block.FieldTargetMinutes, field.TypeInt, value)
	}
	if value, ok := bu.mutation.DistractionMinutes(); ok {
		_spec.SetField(block.FieldDistractionMinutes, field.TypeInt, value)
	}
	if value, ok := bu.mutation.AddedDistractionMinutes(); ok {
		_spec.AddField(block.FieldDistractionMinutes, field.TypeInt, value)
	}
	if value, ok := bu.mutation.Tag(); ok {
		_spec.SetField(block.FieldTag, field.TypeString, value)
	}
	if bu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   block.UserTable,
			Columns: []string{block.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   block.UserTable,
			Columns: []string{block.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{block.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BlockUpdateOne is the builder for updating a single Block entity.
type BlockUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlockMutation
}

// SetFinishDate sets the "finishDate" field.
func (buo *BlockUpdateOne) SetFinishDate(t time.Time) *BlockUpdateOne {
	buo.mutation.SetFinishDate(t)
	return buo
}

// SetNillableFinishDate sets the "finishDate" field if the given value is not nil.
func (buo *BlockUpdateOne) SetNillableFinishDate(t *time.Time) *BlockUpdateOne {
	if t != nil {
		buo.SetFinishDate(*t)
	}
	return buo
}

// ClearFinishDate clears the value of the "finishDate" field.
func (buo *BlockUpdateOne) ClearFinishDate() *BlockUpdateOne {
	buo.mutation.ClearFinishDate()
	return buo
}

// SetTargetMinutes sets the "targetMinutes" field.
func (buo *BlockUpdateOne) SetTargetMinutes(i int) *BlockUpdateOne {
	buo.mutation.ResetTargetMinutes()
	buo.mutation.SetTargetMinutes(i)
	return buo
}

// SetNillableTargetMinutes sets the "targetMinutes" field if the given value is not nil.
func (buo *BlockUpdateOne) SetNillableTargetMinutes(i *int) *BlockUpdateOne {
	if i != nil {
		buo.SetTargetMinutes(*i)
	}
	return buo
}

// AddTargetMinutes adds i to the "targetMinutes" field.
func (buo *BlockUpdateOne) AddTargetMinutes(i int) *BlockUpdateOne {
	buo.mutation.AddTargetMinutes(i)
	return buo
}

// SetDistractionMinutes sets the "distractionMinutes" field.
func (buo *BlockUpdateOne) SetDistractionMinutes(i int) *BlockUpdateOne {
	buo.mutation.ResetDistractionMinutes()
	buo.mutation.SetDistractionMinutes(i)
	return buo
}

// SetNillableDistractionMinutes sets the "distractionMinutes" field if the given value is not nil.
func (buo *BlockUpdateOne) SetNillableDistractionMinutes(i *int) *BlockUpdateOne {
	if i != nil {
		buo.SetDistractionMinutes(*i)
	}
	return buo
}

// AddDistractionMinutes adds i to the "distractionMinutes" field.
func (buo *BlockUpdateOne) AddDistractionMinutes(i int) *BlockUpdateOne {
	buo.mutation.AddDistractionMinutes(i)
	return buo
}

// SetTag sets the "tag" field.
func (buo *BlockUpdateOne) SetTag(s string) *BlockUpdateOne {
	buo.mutation.SetTag(s)
	return buo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (buo *BlockUpdateOne) SetUserID(id uuid.UUID) *BlockUpdateOne {
	buo.mutation.SetUserID(id)
	return buo
}

// SetUser sets the "user" edge to the User entity.
func (buo *BlockUpdateOne) SetUser(u *User) *BlockUpdateOne {
	return buo.SetUserID(u.ID)
}

// Mutation returns the BlockMutation object of the builder.
func (buo *BlockUpdateOne) Mutation() *BlockMutation {
	return buo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (buo *BlockUpdateOne) ClearUser() *BlockUpdateOne {
	buo.mutation.ClearUser()
	return buo
}

// Where appends a list predicates to the BlockUpdate builder.
func (buo *BlockUpdateOne) Where(ps ...predicate.Block) *BlockUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BlockUpdateOne) Select(field string, fields ...string) *BlockUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Block entity.
func (buo *BlockUpdateOne) Save(ctx context.Context) (*Block, error) {
	return withHooks[*Block, BlockMutation](ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BlockUpdateOne) SaveX(ctx context.Context) *Block {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BlockUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BlockUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BlockUpdateOne) check() error {
	if _, ok := buo.mutation.UserID(); buo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Block.user"`)
	}
	return nil
}

func (buo *BlockUpdateOne) sqlSave(ctx context.Context) (_node *Block, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(block.Table, block.Columns, sqlgraph.NewFieldSpec(block.FieldID, field.TypeUUID))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Block.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, block.FieldID)
		for _, f := range fields {
			if !block.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != block.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.FinishDate(); ok {
		_spec.SetField(block.FieldFinishDate, field.TypeTime, value)
	}
	if buo.mutation.FinishDateCleared() {
		_spec.ClearField(block.FieldFinishDate, field.TypeTime)
	}
	if value, ok := buo.mutation.TargetMinutes(); ok {
		_spec.SetField(block.FieldTargetMinutes, field.TypeInt, value)
	}
	if value, ok := buo.mutation.AddedTargetMinutes(); ok {
		_spec.AddField(block.FieldTargetMinutes, field.TypeInt, value)
	}
	if value, ok := buo.mutation.DistractionMinutes(); ok {
		_spec.SetField(block.FieldDistractionMinutes, field.TypeInt, value)
	}
	if value, ok := buo.mutation.AddedDistractionMinutes(); ok {
		_spec.AddField(block.FieldDistractionMinutes, field.TypeInt, value)
	}
	if value, ok := buo.mutation.Tag(); ok {
		_spec.SetField(block.FieldTag, field.TypeString, value)
	}
	if buo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   block.UserTable,
			Columns: []string{block.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   block.UserTable,
			Columns: []string{block.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Block{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{block.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
